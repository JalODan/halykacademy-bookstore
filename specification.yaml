---
openapi: 3.0.0
info:
  title: Bookstore
  description: Bookstore
  contact:
    email: olzhas.jalmukhambetov@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/OLZHASJALMUKHAMBETOV/Bookstore/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: admin
  description: Secured Admin-only calls
- name: user
  description: Operations available to users
paths:
  /book:
    post:
      tags:
      - admin
      description: New book registration
      parameters:
      - name: book
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Book'
      responses:
        "201":
          description: Created
  /book/findByName:
    get:
      tags:
      - user
      parameters:
      - name: title
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "204":
          description: not found
  /author:
    post:
      tags:
      - admin
      description: New author registration
      parameters:
      - name: author
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Author'
      responses:
        "201":
          description: Created
  /author/findByName:
    get:
      tags:
      - user
      parameters:
      - name: firstname
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lastname
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: fathername
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        "204":
          description: not found
  /publisher:
    post:
      tags:
      - admin
      description: New publisher registration
      parameters:
      - name: publisher
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Publisher'
      responses:
        "201":
          description: Created
  /publisher/findByName:
    get:
      tags:
      - user
      parameters:
      - name: name
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        "204":
          description: not found
  /order:
    post:
      tags:
      - user
      parameters:
      - name: order
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Order'
      responses:
        "201":
          description: Created
  /order/approval:
    patch:
      tags:
      - admin
      parameters:
      - name: id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/OrderStatus'
      responses:
        "200":
          description: Successful
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        price:
          type: number
          format: double
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        publisher:
          $ref: '#/components/schemas/Publisher'
        title:
          type: string
        numberOfPages:
          type: integer
          format: int32
        publicationYear:
          type: integer
          format: int32
        genre:
          $ref: '#/components/schemas/Genre'
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        lastname:
          type: string
        firstname:
          type: string
        fathername:
          type: string
        dateOfBirth:
          type: string
          format: date
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        genre:
          $ref: '#/components/schemas/Genre'
    Publisher:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        status:
          $ref: '#/components/schemas/OrderStatus'
    OrderStatus:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
          format: password
        type:
          $ref: '#/components/schemas/UserType'
    UserType:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
